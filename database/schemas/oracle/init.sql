-- Oracle - 성능 비교용 우편번호 데이터베이스
-- 특징: 엔터프라이즈급 기능, CBO(Cost-Based Optimizer), 고급 파티셔닝

-- 사용자 생성은 Docker 이미지에서 자동으로 처리됨

-- 메인 우편번호 테이블 (Oracle 최적화 기능 활용)
CREATE TABLE postal_codes (
    id NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    postal_code VARCHAR2(20) NOT NULL,
    country_code CHAR(3) NOT NULL,
    country_name VARCHAR2(100) NOT NULL,
    admin_area1 VARCHAR2(100),
    admin_area2 VARCHAR2(100), 
    admin_area3 VARCHAR2(100),
    locality VARCHAR2(100),
    thoroughfare VARCHAR2(200),
    premise VARCHAR2(100),
    latitude NUMBER(10,8),
    longitude NUMBER(11,8),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) 
-- 파티셔닝 (Oracle 고급 기능)
PARTITION BY RANGE (created_at) 
INTERVAL(NUMTOYMINTERVAL(1, 'MONTH'))
(
  PARTITION p0 VALUES LESS THAN (TIMESTAMP '2024-01-01 00:00:00')
);

-- Oracle 특화 인덱스들
-- 1. B-tree 인덱스
CREATE INDEX idx_postal_codes_postal_code ON postal_codes (postal_code);
CREATE INDEX idx_postal_codes_country_postal ON postal_codes (country_code, postal_code);

-- 2. 복합 인덱스 (Oracle CBO 최적화)
CREATE INDEX idx_postal_codes_admin_areas ON postal_codes (country_code, admin_area1, admin_area2);

-- 3. 함수 기반 인덱스 (Oracle 특화)
CREATE INDEX idx_postal_codes_upper_area1 ON postal_codes (UPPER(admin_area1));

-- 4. 비트맵 인덱스 (저카디널리티 컬럼용)
CREATE BITMAP INDEX idx_postal_codes_country_bitmap ON postal_codes (country_code);

-- 5. 도메인 인덱스 (텍스트 검색용)
-- Oracle Text 확장이 필요하지만 기본 설치에서는 제외

-- 6. 공간 인덱스 (위치 정보용)
-- Oracle Spatial 확장이 필요하지만 기본 설치에서는 제외

-- 성능 측정용 메타데이터 테이블
CREATE TABLE performance_metrics (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    db_type VARCHAR2(20) DEFAULT 'oracle',
    operation_type VARCHAR2(20) NOT NULL CHECK (operation_type IN ('INSERT', 'SELECT', 'UPDATE', 'DELETE', 'BULK_INSERT')),
    record_count NUMBER NOT NULL,
    execution_time_ms NUMBER NOT NULL,
    memory_usage_mb NUMBER(10,2),
    cpu_usage_percent NUMBER(5,2),
    query_complexity VARCHAR2(10) CHECK (query_complexity IN ('SIMPLE', 'MEDIUM', 'COMPLEX')) DEFAULT 'SIMPLE',
    test_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    execution_plan CLOB,  -- 실행 계획 저장
    notes CLOB
);

-- 트리거 생성 (updated_at 자동 갱신)
CREATE OR REPLACE TRIGGER trg_postal_codes_updated_at
    BEFORE UPDATE ON postal_codes
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Oracle 통계 정보 수집 (CBO 최적화)
BEGIN
    DBMS_STATS.GATHER_TABLE_STATS(
        ownname => USER,
        tabname => 'POSTAL_CODES',
        estimate_percent => DBMS_STATS.AUTO_SAMPLE_SIZE,
        cascade => TRUE
    );
END;
/

-- 테스트 데이터 생성용 프로시저
CREATE OR REPLACE PROCEDURE generate_test_data(p_record_count IN NUMBER)
AS
    l_start_time TIMESTAMP := CURRENT_TIMESTAMP;
    l_admin_areas DBMS_SQL.VARCHAR2_TABLE;
BEGIN
    -- 지역 배열 초기화
    l_admin_areas(1) := '서울특별시'; l_admin_areas(2) := '부산광역시'; 
    l_admin_areas(3) := '대구광역시'; l_admin_areas(4) := '인천광역시';
    l_admin_areas(5) := '광주광역시'; l_admin_areas(6) := '대전광역시';
    l_admin_areas(7) := '울산광역시'; l_admin_areas(8) := '세종특별자치시';
    l_admin_areas(9) := '경기도'; l_admin_areas(10) := '강원도';
    l_admin_areas(11) := '충청북도'; l_admin_areas(12) := '충청남도';
    l_admin_areas(13) := '전라북도'; l_admin_areas(14) := '전라남도';
    l_admin_areas(15) := '경상북도'; l_admin_areas(16) := '경상남도';
    l_admin_areas(17) := '제주특별자치도';
    
    -- 배치 삽입 (FORALL 사용으로 성능 최적화)
    FOR i IN 1..CEIL(p_record_count/10000) LOOP
        INSERT INTO postal_codes (
            postal_code, country_code, country_name, admin_area1, admin_area2, 
            admin_area3, locality, thoroughfare, premise, latitude, longitude
        )
        SELECT 
            LPAD(LEVEL + (i-1)*10000, 5, '0'),
            'KOR',
            '대한민국',
            l_admin_areas(MOD(LEVEL + (i-1)*10000, 17) + 1),
            '구_' || TO_CHAR(MOD(LEVEL + (i-1)*10000, 25) + 1),
            '동_' || TO_CHAR(MOD(LEVEL + (i-1)*10000, 50) + 1),
            '지역_' || TO_CHAR(MOD(LEVEL + (i-1)*10000, 10) + 1),
            '도로_' || TO_CHAR(MOD(LEVEL + (i-1)*10000, 100) + 1) || '번길',
            '건물_' || TO_CHAR(MOD(LEVEL + (i-1)*10000, 20) + 1),
            33 + DBMS_RANDOM.VALUE(0, 5),  -- 위도
            124 + DBMS_RANDOM.VALUE(0, 7)  -- 경도
        FROM DUAL
        CONNECT BY LEVEL <= LEAST(10000, p_record_count - (i-1)*10000);
        
        COMMIT; -- 배치별 커밋
    END LOOP;
    
    -- 통계 정보 갱신
    DBMS_STATS.GATHER_TABLE_STATS(USER, 'POSTAL_CODES');
    
    -- 성능 메트릭 기록
    INSERT INTO performance_metrics (operation_type, record_count, execution_time_ms)
    VALUES ('BULK_INSERT', p_record_count, 
           EXTRACT(DAY FROM (CURRENT_TIMESTAMP - l_start_time)) * 24 * 60 * 60 * 1000 +
           EXTRACT(HOUR FROM (CURRENT_TIMESTAMP - l_start_time)) * 60 * 60 * 1000 +
           EXTRACT(MINUTE FROM (CURRENT_TIMESTAMP - l_start_time)) * 60 * 1000 +
           EXTRACT(SECOND FROM (CURRENT_TIMESTAMP - l_start_time)) * 1000);
    
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Oracle: ' || p_record_count || '개 레코드 삽입 완료');
END generate_test_data;
/

-- Oracle 힌트를 활용한 쿼리 예제들 (주석으로 제공)
/*
-- 1. 인덱스 힌트
SELECT /*+ INDEX(postal_codes, idx_postal_codes_postal_code) * /
       * FROM postal_codes WHERE postal_code = '12345';

-- 2. 병렬 처리 힌트  
SELECT /*+ PARALLEL(postal_codes, 4) * /
       admin_area1, COUNT(*) FROM postal_codes GROUP BY admin_area1;

-- 3. 조인 힌트
SELECT /*+ USE_HASH(p, m) * /
       p.postal_code, m.operation_type 
FROM postal_codes p, performance_metrics m 
WHERE p.id = m.record_count;
*/

-- 뷰 생성 (복잡한 쿼리 단순화)
CREATE OR REPLACE VIEW postal_codes_summary AS
SELECT 
    country_code,
    admin_area1,
    COUNT(*) as total_count,
    AVG(latitude) as avg_latitude,
    AVG(longitude) as avg_longitude,
    MIN(created_at) as earliest_created,
    MAX(created_at) as latest_created
FROM postal_codes
GROUP BY country_code, admin_area1;

-- 실체화 뷰 (성능 최적화) - Enterprise Edition에서만 지원
-- CREATE MATERIALIZED VIEW postal_codes_stats_mv
-- BUILD IMMEDIATE
-- REFRESH FAST ON COMMIT
-- AS SELECT * FROM postal_codes_summary;

COMMIT;
