-- Oracle - 성능 비교용 우편번호 데이터베이스
-- 특징: 엔터프라이즈급 최적화, 파티셔닝, PL/SQL, 고급 인덱싱

-- 사용자 생성 (이미 존재하면 무시)
BEGIN
  EXECUTE IMMEDIATE 'CREATE USER mdb_user IDENTIFIED BY mdb_password';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -1920 THEN -- 사용자가 이미 존재하는 경우 무시
      RAISE;
    END IF;
END;
/

-- 권한 부여
GRANT CONNECT, RESOURCE, DBA TO mdb_user;
GRANT UNLIMITED TABLESPACE TO mdb_user;

-- mdb_user로 스키마 변경
ALTER SESSION SET CURRENT_SCHEMA = mdb_user;

-- 메인 우편번호 테이블
CREATE TABLE postal_codes (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    postal_code VARCHAR2(20) NOT NULL,
    country_code VARCHAR2(3) NOT NULL,
    country_name VARCHAR2(100) NOT NULL,
    admin_area1 VARCHAR2(100),
    admin_area2 VARCHAR2(100),
    admin_area3 VARCHAR2(100),
    locality VARCHAR2(100),
    thoroughfare VARCHAR2(200),
    premise VARCHAR2(100),
    latitude NUMBER(10, 8),
    longitude NUMBER(11, 8),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 성능 측정용 메타데이터 테이블
CREATE TABLE performance_metrics (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    db_type VARCHAR2(20) DEFAULT 'oracle',
    operation_type VARCHAR2(20) NOT NULL CHECK (operation_type IN ('INSERT', 'SELECT', 'UPDATE', 'DELETE', 'BULK_INSERT')),
    record_count NUMBER NOT NULL,
    execution_time_ms NUMBER NOT NULL,
    memory_usage_mb NUMBER(10, 2),
    cpu_usage_percent NUMBER(5, 2),
    query_complexity VARCHAR2(10) CHECK (query_complexity IN ('SIMPLE', 'MEDIUM', 'COMPLEX')) DEFAULT 'SIMPLE',
    test_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    notes CLOB
);

-- 감사 로그 테이블 (변경사항 추적)
CREATE TABLE audit_logs (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    db_type VARCHAR2(20) DEFAULT 'oracle',
    table_name VARCHAR2(50) NOT NULL,
    record_id VARCHAR2(100) NOT NULL,
    operation_type VARCHAR2(10) NOT NULL CHECK (operation_type IN ('INSERT', 'UPDATE', 'DELETE')),
    old_values CLOB,
    new_values CLOB,
    changed_fields CLOB,
    change_source VARCHAR2(50),
    user_id VARCHAR2(100),
    session_id VARCHAR2(100),
    ip_address VARCHAR2(45),
    transaction_id VARCHAR2(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 데이터 무결성 검사 테이블
CREATE TABLE data_integrity_checks (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    check_type VARCHAR2(50) NOT NULL,
    source_db VARCHAR2(20) DEFAULT 'oracle',
    target_db VARCHAR2(20),
    table_name VARCHAR2(50) NOT NULL,
    record_id VARCHAR2(100),
    check_query CLOB,
    issue_found NUMBER(1) DEFAULT 0 CHECK (issue_found IN (0, 1)),
    issue_description CLOB,
    data_before CLOB,
    data_after CLOB,
    severity_level VARCHAR2(10) CHECK (severity_level IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL')) DEFAULT 'LOW',
    status VARCHAR2(10) CHECK (status IN ('PENDING', 'RESOLVED', 'IGNORED')) DEFAULT 'PENDING',
    checked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    resolved_at TIMESTAMP,
    notes CLOB
);

-- 기본 인덱스들
CREATE INDEX idx_postal_codes_postal_code ON postal_codes (postal_code);
CREATE INDEX idx_postal_codes_country_postal ON postal_codes (country_code, postal_code);
CREATE INDEX idx_postal_codes_admin_areas ON postal_codes (country_code, admin_area1, admin_area2);
CREATE INDEX idx_postal_codes_location ON postal_codes (latitude, longitude);
CREATE INDEX idx_postal_codes_created_at ON postal_codes (created_at);

-- 성능 측정 인덱스
CREATE INDEX idx_perf_metrics_db_type ON performance_metrics (db_type);
CREATE INDEX idx_perf_metrics_operation ON performance_metrics (operation_type);
CREATE INDEX idx_perf_metrics_timestamp ON performance_metrics (test_timestamp);

-- 감사 로그 인덱스
CREATE INDEX idx_audit_logs_table_name ON audit_logs (table_name);
CREATE INDEX idx_audit_logs_record_id ON audit_logs (record_id);
CREATE INDEX idx_audit_logs_operation ON audit_logs (operation_type);
CREATE INDEX idx_audit_logs_created_at ON audit_logs (created_at);
CREATE INDEX idx_audit_logs_user_id ON audit_logs (user_id);

-- 무결성 검사 인덱스
CREATE INDEX idx_integrity_checks_type ON data_integrity_checks (check_type, status);
CREATE INDEX idx_integrity_checks_table ON data_integrity_checks (source_db, target_db, table_name);
CREATE INDEX idx_integrity_checks_checked_at ON data_integrity_checks (checked_at);
CREATE INDEX idx_integrity_checks_severity ON data_integrity_checks (severity_level);

-- 업데이트 트리거
CREATE OR REPLACE TRIGGER tr_postal_codes_update
    BEFORE UPDATE ON postal_codes
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- 테스트 데이터 생성 프로시저
CREATE OR REPLACE PROCEDURE generate_test_data(record_count NUMBER)
IS
    admin_areas SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST(
        '서울특별시', '부산광역시', '대구광역시', '인천광역시', '광주광역시',
        '대전광역시', '울산광역시', '세종특별자치시', '경기도', '강원도',
        '충청북도', '충청남도', '전라북도', '전라남도', '경상북도', '경상남도', '제주특별자치도'
    );
    start_time TIMESTAMP := CURRENT_TIMESTAMP;
BEGIN
    FOR i IN 1..record_count LOOP
        INSERT INTO postal_codes (
            postal_code, country_code, country_name, admin_area1, admin_area2,
            admin_area3, locality, thoroughfare, premise, latitude, longitude
        ) VALUES (
            LPAD(i, 5, '0'),
            'KOR',
            '대한민국',
            admin_areas(MOD(i - 1, 17) + 1),
            '구_' || TO_CHAR(MOD(i - 1, 25) + 1),
            '동_' || TO_CHAR(MOD(i - 1, 50) + 1),
            '지역_' || TO_CHAR(MOD(i - 1, 10) + 1),
            '도로_' || TO_CHAR(MOD(i - 1, 100) + 1) || '번길',
            TO_CHAR(i) || '번지',
            37.5665 + (DBMS_RANDOM.VALUE(-2, 2)),
            126.9780 + (DBMS_RANDOM.VALUE(-2, 2))
        );
        
        -- 1000개마다 커밋
        IF MOD(i, 1000) = 0 THEN
            COMMIT;
        END IF;
    END LOOP;
    
    COMMIT;
    
    -- 성능 메트릭 기록
    INSERT INTO performance_metrics (
        operation_type, record_count, execution_time_ms, query_complexity, notes
    ) VALUES (
        'BULK_INSERT',
        record_count,
        EXTRACT(SECOND FROM (CURRENT_TIMESTAMP - start_time)) * 1000,
        'SIMPLE',
        'Oracle 테스트 데이터 생성 - ' || TO_CHAR(record_count) || ' 레코드'
    );
    
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Oracle 테스트 데이터 ' || record_count || '개 생성 완료');
END;
/

-- 통계 수집 프로시저
CREATE OR REPLACE PROCEDURE collect_table_stats
IS
BEGIN
    DBMS_STATS.GATHER_TABLE_STATS('MDB_USER', 'POSTAL_CODES');
    DBMS_STATS.GATHER_TABLE_STATS('MDB_USER', 'PERFORMANCE_METRICS');
    DBMS_STATS.GATHER_TABLE_STATS('MDB_USER', 'AUDIT_LOGS');
    DBMS_STATS.GATHER_TABLE_STATS('MDB_USER', 'DATA_INTEGRITY_CHECKS');
    DBMS_OUTPUT.PUT_LINE('Oracle 테이블 통계 수집 완료');
END;
/

-- 샘플 데이터 생성 (100개)
CALL generate_test_data(100);

-- 통계 수집
CALL collect_table_stats();

-- 테이블 생성 확인
SELECT 'Oracle 스키마 초기화 완료: ' || COUNT(*) || '개 테이블' AS result
FROM user_tables
WHERE table_name IN ('POSTAL_CODES', 'PERFORMANCE_METRICS', 'AUDIT_LOGS', 'DATA_INTEGRITY_CHECKS');
